name: Build Job

on:
  workflow_call:
    inputs:
      dry_run:
        required: true
        type: boolean
      is_master:
        required: true
        type: boolean

    outputs:
      new_package_version:
        value: ${{ jobs.build_module.outputs.new_package_version }}

jobs:
  build_module:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      new_package_version: ${{ steps.output_version.outputs.new_package_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
          ref: ${{ github.event.release.target_commitish }}

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ github.sha }}

      - name: Setup git bot user
        run: |
          git config --local user.email "bot@gmail.com"
          git config --local user.name "GitHub Action"

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Set package version 
        if: ${{ !inputs.dry_run && inputs.is_master }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git tag -l | xargs git tag -d
          git fetch --tags -f
          npm run incrementVersion
          git tag v$(jq -r .version package.json)
          git push --tags

      - name: Output package version
        id: output_version
        run: echo "new_package_version=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Build (dry-run)
        if: ${{ inputs.dry_run }}
        run: npm run build

      - name: Build (with new package version)
        if: ${{ !inputs.dry_run }}
        env:
          PACKAGE_VERSION: $(jq -r .version package.json)
          GIT_SHA: ${{ github.sha }}
        run: npm run build