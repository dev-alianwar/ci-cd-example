name: Build Job

on:
  workflow_call:
    secrets:
      access_token:
        required: true

    inputs:
      dry_run:
        required: true
        type: boolean
      is_master:
        required: true
        type: boolean
      
    outputs:
      new_package_version:
        value: ${{ jobs.build_module.outputs.new_package_version }}

jobs:
  build_module:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      new_package_version: ${{ steps.output_version.outputs.new_package_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
          ref: ${{ github.event.release.target_commitish }}

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ github.sha }}

      - name: Setup git bot user
        run: |
          git config --local user.email "dev.alianwar@gmail.com"
          git config --local user.name "GitHub Action"

      - name: Check if working directory is clean
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "Working directory is not clean. Stashing changes..."
            git stash push --keep-index --quiet
            STASHED_CHANGES=true
          else
            echo "Working directory is clean."
            STASHED_CHANGES=false
          fi

      - name: Extract branch name from merge commit
        id: extract_branch
        run: |
          # Get the commit message of the head commit
          commit_message=$(git log -1 --pretty=%B)
          echo "Commit message: $commit_message"
          
          # Extract branch name from commit message
          if [[ "$commit_message" =~ Merge\ pull\ request\ #[0-9]+\ from\ ([^/]+)/([^[:space:]]+) ]]; then
            merged_branch=${BASH_REMATCH[2]}
          else
            merged_branch="unknown"
          fi
          
          echo "Merged branch: $merged_branch"
          echo "::set-output name=branch::$merged_branch"

      - name: Check if branch name starts with 'feature/', 'fix/', or 'hotfix/'
        run: |
          branch_name="${{ steps.extract_branch.outputs.branch }}"
          if [[ "$branch_name" == feature/* ]]; then
            echo "feature/* branch merged"
            echo "::set-output name=merge_branch_type::feature"
          elif [[ "$branch_name" == fix/* ]]; then
            echo "fix/* branch merged"
            echo "::set-output name=merge_branch_type::fix"
          elif [[ "$branch_name" == hotfix/* ]]; then
            echo "hotfix/* branch merged"
            echo "::set-output name=merge_branch_type::hotfix"
          else
            echo "Branch does not start with feature/, fix/, or hotfix/"
            echo "::set-output name=merge_branch_type::none"
          fi

          echo "Merged branch $merge_branch_type"

      - name: Abort workflow if branch name doesn't match criteria
        if: ${{ steps.extract_branch.outputs.merge_branch_type == 'none' }} 
        run: exit 1

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Increment Version
        if: ${{ steps.check_branch.outputs.matched_branch == 'hotfix' }}
        env:
          GITHUB_TOKEN: ${{ secrets.access_token }}
        run: |
          git tag -l | xargs git tag -d
          git fetch --tags -f
          npm run incrementVersion

      - name: Increment Branch Version
        if: ${{ steps.check_branch.outputs.matched_branch == 'feature' || steps.check_branch.outputs.matched_branch == 'fix' }}
        env:
          GITHUB_TOKEN: ${{ secrets.access_token }}
        run: |
          git tag -l | xargs git tag -d
          git fetch --tags -f
          npm run incrementBranchVersion

      - name: Push tags
        env:
          GITHUB_TOKEN: ${{ secrets.access_token }}
        run: |
          set -e
          echo "GITHUB_TOKEN: ${{ secrets.access_token }}"
          echo "Repository URL: https://github.com/${{ github.repository }}.git"
          VERSION=
          git push origin tag v$(jq -r .version package.json) | {
            while IFS= read -r line; do
              if [[ $line == *"To https"* && $line == *"already exists"* ]]; then
                echo "Tag already exists. Skipping push."
                exit 0
              elif [[ $line == *"Permission denied"* ]]; then
                echo "Permission denied. Make sure you have the necessary permissions."
                exit 1
              fi
              echo "$line"
            done
            }
            git push origin master

      - name: Output package version
        id: output_version
        run: echo "new_package_version=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Build (dry-run)
        if: ${{ inputs.dry_run }}
        run: npm run build

      - name: Build (with new package version)
        if: ${{ !inputs.dry_run }}
        env:
          PACKAGE_VERSION: $(jq -r .version package.json)
          GIT_SHA: ${{ github.sha }}
        run: npm run build